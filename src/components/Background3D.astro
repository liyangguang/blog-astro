<div id="threejs-container"></div>
<style>
  #threejs-container {
    /* TODO: turn it on when finished. */
    /* display: none; */
    position: fixed;
    inset: 0;
    pointer-events: none;
  }
</style>

{/*
  * It must use a script tag, not in the file head. So it only runs on client.
  * https://docs.astro.build/en/guides/troubleshooting/#document-or-window-is-not-defined
 */}
<script>
  import * as THREE from "three";
  import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader.js';

  let scene, camera, renderer;
  let mouseX = 0;
  let mouseY = 0;

  // init();
  // animate();

  function init() {
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 1, 1000);
    camera.position.z = 500;

    renderer = new THREE.WebGLRenderer({alpha: true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.querySelector('#threejs-container').appendChild(renderer.domElement);
    window.addEventListener('mousemove', (event) => {
      mouseX = event.clientX;
      mouseY = event.clientY;
    });

    loadSVG();
  }

  function animate() {
    requestAnimationFrame(animate);
    camera.rotation.x = (mouseY - window.innerHeight / 2) * 0.001;
    camera.rotation.y = (mouseX - window.innerWidth / 2) * 0.001;

    renderer.render(scene, camera);
  }

  function loadSVG() {
    const loader = new SVGLoader();
    loader.load('/icon-code.svg', (data) => {
      const paths = data.paths;

      const group = new THREE.Group();
      scene.add(group);

      const dotGeometry = new THREE.CircleGeometry(2, 16);
      const dotMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });

      paths.forEach((path) => {
        const shapes = path.toShapes(true);
        shapes.forEach((shape) => {
          const totalLength = shape.getLength();
          const numDots = totalLength / 10;

          for (let i = 0; i < numDots; i++) {
            const pathPosition = i / (numDots - 1);
            const point = shape.getPointAt(pathPosition);
            if (!point) break;

            for (let j = 0; j < 5; j++) {
              const dot = new THREE.Mesh(dotGeometry, dotMaterial);
              dot.position.set(point.x, point.y, j * 20);
              group.add(dot);
            }
          }
        });
      });
      group.rotation.y = Math.PI * 0.1;
    });
  }
</script>
