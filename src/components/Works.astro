---

type WorkType = 'Work project'|'Side project'|'Fun project'|'';

interface Work {
  title: string;
  type: WorkType;
  time: string;
  link: string;
  description: string;
  image: any;
}

// TODO: add content
const WORKS: Work[] = [
  {
    title: 'AskLukeW',
    type: 'Work project',
    time: 'Feb 2023 - May 2023',
    link: 'https://ask.lukew.com',
    description: `"Chat with any website" experiment built at Sutter Hill Ventures.I built the pipeline to ingest webpages + audios + videos + PDFs (with many embedding techniques we discovered), and prompting, citation on LLM, as well as all the UI.`,
    image: '/works-images/ask_lukew.png',
  },
  {
    title: 'YDays',
    type: 'Side project',
    time: 'Aug 2020 - Jan 2022',
    link: 'https://ydays.com',
    description: `Creative drawing challenge app. A side project / startup attempt with designer friends.`,
    image: '/works-images/ydays.png',
  },
  {
    title: 'ChatGPT Code Previewer',
    type: 'Side project',
    time: 'Mar 2023',
    link: 'https://chatgpt-code-previewer.vercel.app/',
    description: `Easily preview code generated by ChatGPT, and edit in CodePen.`,
    image: '/works-images/chatgpt_code_previewer.png',
  },
  {
    title: 'AI functions',
    type: 'Fun project',
    time: 'Apr 2023',
    link: 'https://www.npmjs.com/package/ai-function-js',
    description: `Descirbe the feature, and let LLM to *run* the code (without generating the code!)`,
    image: '/works-images/ai_function.png',
  },
  {
    title: 'GPT - TDD',
    type: 'Fun project',
    time: 'Apr 2023',
    link: 'https://github.com/liyangguang/gpt-tdd',
    description: 'Test-Driven-Development + GPT => Auto code generation.',
    image: '/works-images/gpt_tdd.png',
  },
  {
    title: 'Figma TOC+ plugin',
    type: 'Side project',
    time: 'Jan 2022',
    link: 'https://www.figma.com/community/plugin/1037946448690949150/ToC%2B',
    description: `A Figma plugin to generate pages as sections for easier file management.`,
    image: '/works-images/figma_toc.png',
  },
  {
    title: 'Chrome status',
    type: 'Work project',
    time: 'Aug 2019',
    link: 'https://chromestatus.com',
    description: `WebComponent rebuild of the Chrome status site.`,
    image: '/works-images/chromestatus.png',
  },
  {
    title: 'More',
    type: '',
    time: '',
    link: 'mailto:liyangguangcn@gmail.com',
    description: `I've built many projects from 0 to 1: educational games, interactive story telling, a project tracking tool, a custom CMS, and many more.`,
    image: '/works-images/lock.png',
  },
];

const GRADIENT_MAP = new Map<WorkType, [string, string]>([
  ['Work project', ['#FAD961', '#F76B1C']],
  ['Side project', ['#8EC5FC', '#E0C3FC']],
  ['Fun project', ['#85FFBD', '#FFFB7D']],
  ['', ['#8EC5FC', '#E0C3FC']],
]);
---
<ul>
  {
    WORKS.map(async (work) => (
      <li>
        <a class="image-wrapper" href={work.link} target="_blank" rel="noreferrer noopener" style={{'--gradient-from': GRADIENT_MAP.get(work.type)![0], '--gradient-to': GRADIENT_MAP.get(work.type)![1]}}>
          <img src={work.image} alt="" />
        </a>
        <div class="text-wrapper">
          <a class="title" href={work.link} target="_blank" rel="noreferrer noopener">{work.title}</a>
          <p class="metadata">{[work.time, work.type].filter(String).join(' | ')}</p>
          <p>{work.description}</p>
        </div>
      </li>
    ))
  }
</ul>

<style>
  ul {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2em;
    padding: 0;
    list-style: none;
  }

  a {
    text-decoration: none;
  }

  .text-wrapper {
    padding: 1em 0;
  }

  p {
    margin: .3em 0;
  }

  .title {
    color: var(--accent);
    font-weight: bold;
  }

  .metadata {
    font-size: .8em;
    opacity: .8;
  }

  .image-wrapper {
    display: block;
    padding: 2.5em;
    background: linear-gradient(140deg, var(--gradient-from), var(--gradient-to));
  }

  img {
    --rotate: 0deg;
    --scale: 1;
    --move-x: 0%;
    aspect-ratio: 16/9;
    object-fit: cover;
    box-shadow: 2px 2px 18px #0005;
    background: white;
    transition: transform var(--transition);
    transform: perspective(400px) rotate3d(0, 1, 0, var(--rotate)) scale(var(--scale)) translateX(var(--move-x));
  }

  .image-wrapper:hover img {
    --rotate: -10deg;
    --scale: 1.2;
    --move-x: 5%;
  }
</style>
