---
/* This is individual blog page. */

import { CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '@src/BaseLayout.astro';
import FormattedDate from '@components/FormattedDate.astro';
import Tags from '@components/Tags.astro';
import Toc from '@components/Toc.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { title, pubDate, updatedDate, heroImage } = post.data;
const { Content, headings } = await post.render();
---

<BaseLayout>
	<style slot="style">
		:root {
			--blog-max-width: 70ch;
		}

		.title {
			font-size: 2em;
			margin: 3em 0 .5em;
		}
		hr {
			border-top: 1px solid #ddd;
			margin: 1rem 0;
		}
		.last-updated-on {
			font-style: italic;
		}

		.wrapper {
			display: grid;
			grid-template-columns: 1fr 300px;
			gap: 2em;
		}

		.content {
			width: 100%;
			max-width: var(--blog-max-width);
		}

		@media screen and (max-width: 1000px) {
			.wrapper {
				grid-template-columns: 1fr;
			}

			.content {
				grid-row: 1;
				margin: 0 auto;
			}
		}
	</style>

	<article>
		{heroImage && <img width={720} height={360} src={heroImage} alt="" />}
		<h1 class="title">{title}</h1>
		{pubDate && <FormattedDate date={pubDate} />}
		{
			updatedDate && (
				<div class="last-updated-on">
					Last updated on <FormattedDate date={updatedDate} />
				</div>
			)
		}
		&nbsp;
		<Tags tags={post.data.tags}></Tags>
		<hr />
		<div class="wrapper">
			<div class="content">
				<Content />
			</div>
			<Toc pageHeadings={headings}>
		</div>
	</article>
</BaseLayout>
